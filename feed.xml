<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://zhihaol.eu.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhihaol.eu.org/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-05T18:29:37+00:00</updated><id>https://zhihaol.eu.org/feed.xml</id><title type="html">blank</title><subtitle>The way towards Geospatial Data Scientist </subtitle><entry xml:lang="eng"><title type="html">My thesis in a page</title><link href="https://zhihaol.eu.org/blog/2023/abstract/" rel="alternate" type="text/html" title="My thesis in a page"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/abstract</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/abstract/"><![CDATA[]]></content><author><name>Zhihao</name></author><category term="climate"/><category term="geomatics"/><category term="remote_sensing"/><category term="machine_learning"/><category term="links"/><summary type="html"><![CDATA[Advancements in Snow Depth Retrieval Using Satellite Altimetry and Machine Learning]]></summary></entry><entry xml:lang="eng"><title type="html">Correlation and distribution</title><link href="https://zhihaol.eu.org/blog/2023/corelation-and-distribution/" rel="alternate" type="text/html" title="Correlation and distribution"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/corelation-and-distribution</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/corelation-and-distribution/"><![CDATA[<h2 id="correlation">Correlation</h2> <p>Pandas provide a useful df.corr() fucntion, where you can set method = Pearson’r, Kendall’s τ or Spearman’s ρ:</p> <ul> <li> <p>Pearson Correlation (Pearson’s r) measures the linear relationship between two continuous variables.</p> <ul> <li> <p>Assumptions: Pearson correlation assumes that the data follows a normal distribution, and it is sensitive to outliers.</p> </li> <li> <p>Range: Pearson correlation coefficients range from -1 (perfect negative linear relationship) to 1 (perfect positive linear relationship), with 0 indicating no linear relationship.</p> </li> </ul> </li> <li> <p>Kendall Tau Correlation (Kendall’s τ or τ) is a non-parametric measure of association between two variables. It assesses the strength and direction of the monotonic (non-linear) relationship between two variables.</p> <ul> <li> <p>Assumptions: Kendall Tau is robust to the presence of outliers and does not assume that the data follows a specific distribution.</p> </li> <li> <p>Range: Kendall’s τ ranges from -1 (perfect inverse association) to 1 (perfect direct association), with 0 indicating no association.</p> </li> </ul> </li> <li> <p>Spearman Rank Correlation (Spearman’s ρ or ρ) is another non-parametric method used to measure the strength and direction of association between two variables. It assesses the monotonic relationship, similar to Kendall Tau but work more efficient over large dataset.</p> <ul> <li> <p>Assumptions: Spearman’s correlation is also robust to outliers and does not rely on specific distribution assumptions.</p> </li> <li> <p>Range: Spearman’s ρ has a similar range to Kendall Tau, from -1 (perfect inverse association) to 1 (perfect direct association), with 0 indicating no association.</p> </li> </ul> </li> </ul> <p>One of the correlation matrix example is:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">corr</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[[</span><span class="sh">'</span><span class="s">sd_correct_dtm1</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">df_dtm1_era5</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">slope</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">aspect</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">planc</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">profc</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">curvature</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi_9</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi_27</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sd_era</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sde_era</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">wf_positive</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wf_negative</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">]].</span><span class="nf">corr</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">coolwarm</span><span class="sh">"</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p><img src="https://i.imgur.com/3eHZufh.png" alt=""/></p> <p>However, correlation is very simple quantification of two variables, which cannot handle high-dimension relationship. In the real-world, consider a scenario where you are analyzing a dataset with multiple features contributing to an outcome. A single correlation value for each pair of features does not capture the complexity of the relationships at play. So, you may see the correlation between two variables may appear extremely weak when the sample contains such a high dimension relationship. As you can see, here is a case of correlation between topo-climatic features and snow depth / snow depth variability.</p> <p>There are several way to deal with such situation.</p> <ul> <li>PCA (Principal Component Analysis) and Dimensionality Reduction</li> <li>Parallel Coordinates Plot</li> <li>T-SNE (t-Distributed Stochastic Neighbor Embedding)</li> </ul> <h2 id="distribution">Distribution</h2> <p>One of concern is the distribution of snow depth. In some case, it said the gamma distribution is the most</p> <p><img src="https://i.imgur.com/wI4trBS.png" alt=""/></p> <h2 id="kolmogorov-smirnov-d-statistic">Kolmogorov-smirnov D statistic</h2> <p>When comparing two datasets, if their data distributions align and their rankings match, it’s a strong indicator that the datasets are identical. This means the values and their order are in perfect sync. Sometimes, the rankings match, but the data distributions don’t quite align. This suggests that the datasets share a similar structure, but one may be on a different scale. In such cases, we can use quantile mapping to correct the distribution, assuming we know the correct one. If the distributions of two datasets fit together, meaning that all quantiles are identical, it’s a green light for focusing on probability. This is especially valuable when you’re more concerned about event likelihood than the specific order or structure of the data.</p>]]></content><author><name>Zhihao</name></author><category term="statistics"/><category term="datascience"/><category term="machine_learning"/><category term="links"/><summary type="html"><![CDATA[...]]></summary></entry><entry xml:lang="eng"><title type="html">Correlation and distribution</title><link href="https://zhihaol.eu.org/blog/2023/dtm1_vs_icesat2/" rel="alternate" type="text/html" title="Correlation and distribution"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/dtm1_vs_icesat2</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/dtm1_vs_icesat2/"><![CDATA[<h2 id="correlation">Correlation</h2> <p>Pandas provide a useful df.corr() fucntion, where you can set method = Pearson’r, Kendall’s τ or Spearman’s ρ:</p> <ul> <li> <p>Pearson Correlation (Pearson’s r) measures the linear relationship between two continuous variables.</p> <ul> <li> <p>Assumptions: Pearson correlation assumes that the data follows a normal distribution, and it is sensitive to outliers.</p> </li> <li> <p>Range: Pearson correlation coefficients range from -1 (perfect negative linear relationship) to 1 (perfect positive linear relationship), with 0 indicating no linear relationship.</p> </li> </ul> </li> <li> <p>Kendall Tau Correlation (Kendall’s τ or τ) is a non-parametric measure of association between two variables. It assesses the strength and direction of the monotonic (non-linear) relationship between two variables.</p> <ul> <li> <p>Assumptions: Kendall Tau is robust to the presence of outliers and does not assume that the data follows a specific distribution.</p> </li> <li> <p>Range: Kendall’s τ ranges from -1 (perfect inverse association) to 1 (perfect direct association), with 0 indicating no association.</p> </li> </ul> </li> <li> <p>Spearman Rank Correlation (Spearman’s ρ or ρ) is another non-parametric method used to measure the strength and direction of association between two variables. It assesses the monotonic relationship, similar to Kendall Tau but work more efficient over large dataset.</p> <ul> <li> <p>Assumptions: Spearman’s correlation is also robust to outliers and does not rely on specific distribution assumptions.</p> </li> <li> <p>Range: Spearman’s ρ has a similar range to Kendall Tau, from -1 (perfect inverse association) to 1 (perfect direct association), with 0 indicating no association.</p> </li> </ul> </li> </ul> <p>One of the correlation matrix example is:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">corr</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[[</span><span class="sh">'</span><span class="s">sd_correct_dtm1</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">df_dtm1_era5</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">slope</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">aspect</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">planc</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">profc</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">curvature</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi_9</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">tpi_27</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sd_era</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sde_era</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">wf_positive</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wf_negative</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">]].</span><span class="nf">corr</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">coolwarm</span><span class="sh">"</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p><img src="https://i.imgur.com/3eHZufh.png" alt=""/></p> <p>However, correlation is very simple quantification of two variables, which cannot handle high-dimension relationship. In the real-world, consider a scenario where you are analyzing a dataset with multiple features contributing to an outcome. A single correlation value for each pair of features does not capture the complexity of the relationships at play. So, you may see the correlation between two variables may appear extremely weak when the sample contains such a high dimension relationship. As you can see, here is a case of correlation between topo-climatic features and snow depth / snow depth variability.</p> <p>There are several way to deal with such situation.</p> <ul> <li>PCA (Principal Component Analysis) and Dimensionality Reduction</li> <li>Parallel Coordinates Plot</li> <li>T-SNE (t-Distributed Stochastic Neighbor Embedding)</li> </ul> <h2 id="distribution">Distribution</h2> <p>One of concern is the distribution of snow depth. In some case, it said the gamma distribution is the most</p> <p><img src="https://i.imgur.com/wI4trBS.png" alt=""/></p> <h2 id="kolmogorov-smirnov-d-statistic">Kolmogorov-smirnov D statistic</h2> <p>When comparing two datasets, if their data distributions align and their rankings match, it’s a strong indicator that the datasets are identical. This means the values and their order are in perfect sync. Sometimes, the rankings match, but the data distributions don’t quite align. This suggests that the datasets share a similar structure, but one may be on a different scale. In such cases, we can use quantile mapping to correct the distribution, assuming we know the correct one. If the distributions of two datasets fit together, meaning that all quantiles are identical, it’s a green light for focusing on probability. This is especially valuable when you’re more concerned about event likelihood than the specific order or structure of the data.</p>]]></content><author><name>Zhihao</name></author><category term="statistics"/><category term="datascience"/><category term="machine_learning"/><category term="links"/><summary type="html"><![CDATA[...]]></summary></entry><entry xml:lang="eng"><title type="html">My Poster at LATICE 2023</title><link href="https://zhihaol.eu.org/blog/2023/LATICE2023/" rel="alternate" type="text/html" title="My Poster at LATICE 2023"/><published>2023-03-26T00:00:00+00:00</published><updated>2023-03-26T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/LATICE2023</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/LATICE2023/"><![CDATA[]]></content><author><name>Zhihao</name></author><category term="climate"/><category term="datascience"/><category term="links"/><summary type="html"><![CDATA[Snow Depth from Satellite Laser Altimetry - Co-registration, Bias Correction, and Statistical Downscaling]]></summary></entry><entry xml:lang="eng"><title type="html">My talk at SDG 2023</title><link href="https://zhihaol.eu.org/blog/2023/SDG2023/" rel="alternate" type="text/html" title="My talk at SDG 2023"/><published>2023-02-07T00:00:00+00:00</published><updated>2023-02-07T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/SDG2023</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/SDG2023/"><![CDATA[]]></content><author><name>Zhihao</name></author><category term="sustainable"/><category term="climate"/><category term="links"/><summary type="html"><![CDATA[The scerets behind the snow depth]]></summary></entry><entry xml:lang="eng"><title type="html">NuthKaab Coreg vs Gradient Descending Coreg</title><link href="https://zhihaol.eu.org/blog/2023/GradientDescendingCoreg/" rel="alternate" type="text/html" title="NuthKaab Coreg vs Gradient Descending Coreg"/><published>2023-01-02T00:00:00+00:00</published><updated>2023-01-02T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/GradientDescendingCoreg</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/GradientDescendingCoreg/"><![CDATA[<p>DEM coregistration is an important step in improving the quality of a DEM by eliminating horizontal shift and vertical bias. However, it can be time-consuming, particularly for large datasets and global applications such as the SNOWDEPTH project.</p> <p>In the past few months, I have found that the implementation of NuthKaab coregistration in xDEM is not fast enough for ICESat-2 datasets. As a result, I have developed a new method called ‘Gradient Descending Coregistration,’ which works similarly to ICP (Iterative Closest Point) but is significantly faster. I am eager to receive professional input to make this method more robust and useful for others.</p> <p>The purpose of this section is:</p> <ul> <li>to compare the performance of NuthKaab coregistration and ‘Gradient Descending Coregistration’ on ICESat-2 datasets.</li> <li>In addition, I will consider the possibility of extending ‘Gradient Descending Coregistration’ to other scenarios beyond ICESat-2 point coregistration.</li> <li>Finally, I will explore the footprint problem: should I treat the point measurements of ICESat-2 as a footprint (zonal statistics) or using point interpolation.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">geopandas</span> <span class="k">as</span> <span class="n">gpd</span>
<span class="kn">import</span> <span class="n">xdem</span>
<span class="kn">import</span> <span class="n">xdem_pt</span>
<span class="kn">import</span> <span class="n">importlib</span>
<span class="kn">import</span> <span class="n">pyproj</span>
<span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">load_gdf</span><span class="p">,</span><span class="n">best_shift_px</span><span class="p">,</span><span class="n">get_dh_by_shift_px_gdf</span><span class="p">,</span><span class="n">get_dh_by_shift_px_dem</span><span class="p">,</span><span class="n">get_dh_dem</span><span class="p">,</span><span class="n">dem_difference_plot</span><span class="p">,</span> <span class="n">best_footprint</span><span class="p">,</span><span class="n">get_dh_by_footprint</span>
<span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">df_from_dem</span>
<span class="kn">from</span> <span class="n">xsnow.goplot</span> <span class="kn">import</span> <span class="n">final_histogram</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Loading the dataset.
</span>
<span class="c1"># 1 ICESat-2 snow free measurements.
</span><span class="n">sf_gdf</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">snow_free_land_gdf.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 2 DTM 10 exmaple (10 m Norway DTM-10)
</span><span class="n">fid_dtm10</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\DTM10_UTM33\6603_3_10m_z33.tif</span><span class="sh">'</span>
<span class="n">dtm_10_</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_dtm10</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dst_crs</span><span class="o">=</span><span class="n">pyproj</span><span class="p">.</span><span class="nc">CRS</span><span class="p">(</span><span class="mi">32633</span><span class="p">),</span><span class="n">dst_res</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">dtm_10</span> <span class="o">=</span> <span class="n">dtm_10_</span> <span class="o">+</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="sh">'</span><span class="s">no_kv_HREF2018B_NN2000_EUREF89.tif</span><span class="sh">'</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm_10_</span><span class="p">,</span><span class="n">resampling</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 3 DTM 1 exmaple (1 m Norway DTM-1)
</span><span class="n">fid_dtm1</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\DTM1_11-11_UTM33\33-112-114.tif</span><span class="sh">'</span>
<span class="n">dtm_1_</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_dtm1</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dst_crs</span><span class="o">=</span><span class="n">pyproj</span><span class="p">.</span><span class="nc">CRS</span><span class="p">(</span><span class="mi">32633</span><span class="p">),</span><span class="n">dst_res</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="n">dtm_1</span> <span class="o">=</span> <span class="n">dtm_1_</span> <span class="o">+</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="sh">'</span><span class="s">no_kv_HREF2018B_NN2000_EUREF89.tif</span><span class="sh">'</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm_1_</span><span class="p">,</span><span class="n">resampling</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># subset snow free measurements
</span><span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">load_gdf</span>
<span class="n">sf_subset_dtm10</span> <span class="o">=</span> <span class="nf">load_gdf</span><span class="p">(</span><span class="n">sf_gdf</span><span class="p">,</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sf_subset_dtm1</span> <span class="o">=</span> <span class="nf">load_gdf</span><span class="p">(</span><span class="n">sf_gdf</span><span class="p">,</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">The length of sf_subset_dtm10: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm10</span><span class="p">)</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">The length of sf_subset_dtm1: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm1</span><span class="p">)</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The length of sf_subset_dtm10: 20291 points
The length of sf_subset_dtm1: 1113 points
</code></pre></div></div> <h3 id="the-main-challenges-of-applying-nuthkaab-coreg-on-icesat-2">The main challenges of applying NuthKaab coreg on ICESat-2</h3> <p>NuthKaab estimates the ‘shift matrix’ iteratively by solving a cosine equation that models the direction in which the DEM is most likely offset.</p> <ul> <li>(1) However, this process requires the calculation of ‘slope’, ‘aspect’, and ‘curvature’, which can be time-consuming and resource-intensive, especially if the DEM has a fine resolution. In fact, the computational cost of NuthKaab coregistration grows exponentially as the resolution of the DEM increases.</li> <li>(2) In addition, NuthKaab is a statistical method that requires a large sample of points (e.g. at least 1000-2000) to work accurately. If there are too few points available in the ICESat-2 dataset (which is often the case with fine DEMs), NuthKaab may not work properly or may produce incorrect results.</li> </ul> <p>Below, I have provided three examples to illustrate these challenges.</p> <ul> <li>(a) NuthKaab coregistration works well on a normal DEM with sufficient points.</li> <li>(b) NuthKaab takes longer and produces incorrect results on a fine DEM with fewer points.</li> <li>(c) NuthKaab fails completely when there are not enough points (e.g. less than 500).</li> </ul> <h4 id="nuthkaab-coreg">NuthKaab Coreg</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># (a) NuthKaab Coreg examples of DTM10. It works well on normal DEMs.
</span><span class="n">results_nk_10</span> <span class="o">=</span> <span class="nf">get_dh_dem</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">mask_highcurv</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
CPU times: total: 35.3 s
Wall time: 35.3 s
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_4_1.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># NuthKaab example on DTM1, it consumes more time on DTM1, and bad coreg due to sample size.
</span><span class="n">result_nk_1</span> <span class="o">=</span> <span class="nf">get_dh_dem</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">,</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">mask_highcurv</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># The STD, RMSE, NMAD do not improve after NuthKaab Coreg.
# Even the bias is not relieable becasue the samll sample size.
</span></code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
CPU times: total: 5min 58s
Wall time: 5min 58s
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_5_1.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>
<span class="c1"># NuthKaab fail due to sample size. Here I downsampling to 500 points.
</span>
<span class="n">result</span> <span class="o">=</span> <span class="nf">get_dh_dem</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mi">500</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm1</span><span class="p">)),</span> <span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">mask_highcurv</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running Nuth and Kääb (2011) coregistration.
   Calculate slope and aspect
   Statistics on initial dh:
      Median = -0.117 - NMAD = 0.795
   Iteratively estimating horizontal shit:

   Progress:   0%|          | 0/10 [00:00&lt;?, ?it/s]


---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

File &lt;timed exec&gt;:3, in &lt;module&gt;


ValueError: Less than 10 different cells exist.
</code></pre></div></div> <h4 id="gradient-descending-coreg">Gradient Descending Coreg</h4> <p>Gradient descent is an optimization algorithm commonly used in machine learning and data science to find the minimum of a function. It works by iteratively adjusting the parameters of the function in the direction that minimizes the output value. Here the values are the offset of the DEM, or the ‘shift matrix’.</p> <p>It works like going down from the top of the mountain.</p> <ul> <li>Check the surrounding.</li> <li>Calculate the slope (gradient) on each direction. Here the elevation is the loss function.</li> <li>Do adjustment (going downhill) according to your pace (learning rate).</li> <li>Iterate.</li> <li>Reach the minimum of a function.</li> </ul> <p>We run three examples again by Gradient Descending Coreg, <strong>being mind of the time.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># (a) DTM 10.
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Comparision on DTM10</span><span class="sh">'</span><span class="p">)</span>

<span class="c1">## gradient descending coreg
</span><span class="n">results_10</span> <span class="o">=</span> <span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,</span><span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">mix</span><span class="sh">'</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">99</span><span class="p">,</span><span class="n">downsampling</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1">## get dh using parameters from gradient descending coreg
</span><span class="n">pts_10</span> <span class="o">=</span> <span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,(</span><span class="n">results_10</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">results_10</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="n">results_10</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">stat</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1">## plot
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">results_nk_10</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_after</span><span class="sh">'</span><span class="p">],</span><span class="n">pts_10</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">results_nk_10</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.5</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">NuthKaab Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Gradient Descending Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad:</span><span class="sh">'</span><span class="p">,</span><span class="n">results_nk_10</span><span class="p">[</span><span class="sh">'</span><span class="s">shift_matrix</span><span class="sh">'</span><span class="p">],</span><span class="n">results_nk_10</span><span class="p">[</span><span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">nmad_after</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Comparision on DTM10
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.5000,0.3906,0.1385),0.3243
NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad: (-0.47167920355557263, 0.3644381456590511, 0.137939453125) 0.32735018920898434
CPU times: total: 9.84 s
Wall time: 9.84 s
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_8_1.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># (b) DTM 1
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Comparision on DTM1</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">## gradient descending coreg
</span><span class="n">results_1</span> <span class="o">=</span> <span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">sf_subset_dtm1</span><span class="p">,</span><span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">mix</span><span class="sh">'</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.5</span><span class="p">)</span>

<span class="c1">## using parameters from gradient descending coreg. No bias correction.
</span><span class="n">pts_1</span> <span class="o">=</span> <span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="n">results_1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">results_1</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="mi">0</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1">## plot in comparison with NuthKaab Coreg
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_after</span><span class="sh">'</span><span class="p">]</span><span class="o">+</span><span class="n">results_1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">pts_1</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">bins</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.5</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">NuthKaab Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Gradient Descending Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad:</span><span class="sh">'</span><span class="p">,</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">shift_matrix</span><span class="sh">'</span><span class="p">],</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">nmad_after</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Comparision on DTM1
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.8750,-1.2284,-0.1682),0.7210
NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad: (-0.3431186328204423, -1.0512761859101158, -0.169189453125) 0.7765913818359375
CPU times: total: 641 ms
Wall time: 626 ms
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_9_1.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># (c) DTM 1 with only 500 points
</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Comparision on DTM1 - 500 points challenge</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">## gradient descending coreg
</span><span class="n">results_500</span> <span class="o">=</span> <span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">sf_subset_dtm1</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mi">1000</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm1</span><span class="p">)),</span><span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">mix</span><span class="sh">'</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">99</span><span class="p">)</span>

<span class="c1">## get dh using parameters from gradient descending coreg
</span><span class="n">pts_500</span> <span class="o">=</span> <span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="n">results_500</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">results_500</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="mi">0</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1">## plot in comparison with (b)
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">pts_1</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">pts_500</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">bins</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.5</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GD Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">GD Coreg (500 pts)</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad: Fail to coreg</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Comparision on DTM1 - 500 points challenge
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.0000,-0.2374,-0.1486),0.7371
NuthKaab Coreg fit matrix(e_px,n_px,bias),nmad: Fail to coreg
CPU times: total: 781 ms
Wall time: 779 ms
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_10_1.png" alt="png" class="center-image"/></p> <h4 id="section-summary">Section summary</h4> <p>‘Gradient Descending Coregistration’ is a point-based coregistration method that <strong>is significantly fast (in seconds) and efficient regardless of the resolution of the DEM</strong>. It is also able to handle datasets with a small number of points, unlike NuthKaab coregistration which requires a large sample size to work accurately.</p> <p>In addition to using NMAD, my ‘Gradient Descending Coregistration’ method <strong>also incorporates RMSE to make the coregistration process more ‘sensitive’ to ‘shifts’. In contrast, xDEM only uses NMAD,</strong> which may not always give the optimal offset but explained the difference in previous examples.</p> <ul> <li>However, it is important to carefully choose the hyperparameters, particularly the learning rate, to ensure that the algorithm can find the global minimum of the function.</li> <li>It is also worth noting that the results of ‘Gradient Descending Coregistration’ may vary depending on the local minima reached, particularly when sample size are less than 1000 points.</li> <li>Finally, for datasets with a very large number of points (e.g. over 50000), I recommend using NuthKaab coregistration, which is very robust in these scenarios.</li> </ul> <h2 id="not-just-icesat-2">Not just ICESat-2</h2> <p>In addition to being effective for co-registering DEMs with points, <strong>‘Gradient Descending Coregistration’ also performs well for normal DEM coregistration.</strong></p> <p>To compare the speed and accuracy, we will use two different datasets: (1) a known shifted DTM10, and (2) Arctic DEM and DTM1.</p> <ul> <li>(a) xdem.NuthKaab</li> <li>(b) Gradient Descending Coreg</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">dem_difference_plot</span>
<span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">dem_shift</span>
<span class="kn">import</span> <span class="n">xdem</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Shift a DTM10 (1.2,-0.7) px and 0.16 m on purpose
</span><span class="n">dtm_10_shifted</span> <span class="o">=</span> <span class="nf">dem_shift</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="mf">1.2</span><span class="p">,</span><span class="o">-</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">0.16</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot. dh resembles to terrain.
</span><span class="n">ddem</span> <span class="o">=</span> <span class="n">dtm_10_shifted</span> <span class="o">-</span> <span class="n">dtm_10</span>
<span class="n">ddem</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="mi">10</span><span class="p">,</span><span class="n">vmax</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_21_0.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># a. NuthKaab Coreg on DEM and shifted DEM
</span>
<span class="n">func</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="n">coreg</span><span class="p">.</span><span class="nc">NuthKaab</span><span class="p">()</span>
<span class="n">func</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">dtm_10_shifted</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Coreg maxtrix east_px, north_px, bias:</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_east_px</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_north_px</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">bias</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coreg maxtrix east_px, north_px, bias:-1.2199,0.7108,-0.160
CPU times: total: 1min
Wall time: 1min
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>
<span class="c1"># b. Gradient descending Coreg on DEM and shifted DEM
</span>
<span class="c1"># sampling points from DEM
</span><span class="n">df</span> <span class="o">=</span> <span class="nf">df_from_dem</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">samples</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>

<span class="c1"># runing gradient descening coreg on sampling points
</span><span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_10_shifted</span><span class="p">,</span><span class="n">df</span><span class="p">,</span><span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">footprint</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">bounds</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">,</span><span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">nmad</span><span class="sh">'</span><span class="p">,</span><span class="n">downsampling</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.1935,0.7031,-0.1600),0.0691
CPU times: total: 1.12 s
Wall time: 1.09 s


(-1.1935, 0.703125, -0.16000366, 0.06911228942871094)
</code></pre></div></div> <p>The examples indicate that time reducing <strong>from 1 minutes to 1 seconds!</strong> It could be from 14 minutes to 5 seconds. Now lets looks at some real datasets. Co-registering <strong>Arctic DEM and DTM1</strong>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## DTM1 
</span><span class="n">fid_dtm1</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\DTM1_11-11_UTM33\33-113-119.tif</span><span class="sh">'</span>
<span class="n">dtm1</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_dtm1</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dst_crs</span><span class="o">=</span><span class="n">pyproj</span><span class="p">.</span><span class="nc">CRS</span><span class="p">(</span><span class="mi">32633</span><span class="p">),</span><span class="n">dst_res</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>

<span class="n">grid_nn2000</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="sh">'</span><span class="s">no_kv_HREF2018B_NN2000_EUREF89.tif</span><span class="sh">'</span><span class="p">)</span>
<span class="n">dtm_1_ref</span> <span class="o">=</span> <span class="n">dtm1</span> <span class="o">+</span> <span class="n">grid_nn2000</span><span class="p">.</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm1</span><span class="p">,</span><span class="n">resampling</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">)</span>

<span class="c1">## Arctic DEM and reproject to DTM1
</span><span class="n">fid_arctic</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\ArcticDEM\21_67_1_1_2m_v3.0\21_67_1_1_2m_v3.0_reg_dem.tif</span><span class="sh">'</span>
<span class="n">dtm_arctic</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_arctic</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm1</span><span class="p">)</span>

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>

<span class="c1"># a. NuthKaab Coreg. Work on 1m resolution.
</span>
<span class="n">func</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="n">coreg</span><span class="p">.</span><span class="nc">NuthKaab</span><span class="p">()</span>
<span class="n">func</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">dtm_1_ref</span><span class="p">,</span><span class="n">dtm_arctic</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Coreg maxtrix east_px, north_px, bias:</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_east_px</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_north_px</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">bias</span><span class="sh">"</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coreg maxtrix east_px, north_px, bias:5.1641,-4.1300,-0.555
CPU times: total: 14min 4s
Wall time: 14min 4s
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>
<span class="c1"># b. Gradient descending Coreg. Work on 1m resolution.
</span>
<span class="c1"># sampling points from DEM_Ref
</span><span class="n">df_ref</span> <span class="o">=</span> <span class="nf">df_from_dem</span><span class="p">(</span><span class="n">dtm_1_ref</span><span class="p">,</span><span class="n">samples</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>

<span class="c1"># runing gradient descening coreg on sampling points
</span><span class="n">res_gd</span> <span class="o">=</span><span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_arctic</span><span class="p">,</span><span class="n">df_ref</span><span class="p">,</span><span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">footprint</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">bounds</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">,</span><span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">mix</span><span class="sh">'</span><span class="p">,</span><span class="n">downsampling</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">99</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(2.7500,-3.4922,-0.5269),0.9925
CPU times: total: 5.25 s
Wall time: 5.25 s
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="c1"># ddem
</span><span class="n">ddem_raw</span> <span class="o">=</span> <span class="n">dtm_arctic</span> <span class="o">-</span> <span class="n">dtm_1_ref</span>
<span class="n">ddem_coreg_nuthkaab</span> <span class="o">=</span> <span class="nf">dem_shift</span><span class="p">(</span><span class="n">dtm_arctic</span><span class="p">,</span><span class="mf">5.1641</span><span class="p">,</span><span class="o">-</span><span class="mf">4.13</span><span class="p">,</span><span class="o">-</span><span class="mf">0.555</span><span class="p">)</span> <span class="o">-</span> <span class="n">dtm_1_ref</span>
<span class="n">ddem_coreg_gd</span> <span class="o">=</span> <span class="nf">dem_shift</span><span class="p">(</span><span class="n">dtm_arctic</span><span class="p">,</span><span class="mf">2.7500</span><span class="p">,</span><span class="o">-</span><span class="mf">3.4922</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5269</span><span class="p">)</span> <span class="o">-</span> <span class="n">dtm_1_ref</span>

<span class="c1"># plot
</span><span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span><span class="n">ax2</span><span class="p">,</span><span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    
<span class="n">ddem_coreg_nuthkaab</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">vmin</span><span class="o">=-</span><span class="mi">2</span><span class="p">,</span><span class="n">cb_title</span><span class="o">=</span><span class="sh">'</span><span class="s">dH (m)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ddem_coreg_gd</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">vmin</span><span class="o">=-</span><span class="mi">2</span><span class="p">)</span>

<span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">dH (coreg_nuthkaab)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">dH (coreg_gradient_descending)</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">final_histogram</span><span class="p">(</span><span class="n">ddem_coreg_nuthkaab</span><span class="p">,</span><span class="n">ddem_coreg_gd</span><span class="p">,</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">ddem_raw</span><span class="p">,</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span><span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">NuthKaab</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">GradientDescending</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_28_1.png" alt="png" class="center-image"/></p> <h4 id="section-summary-1">Section Summary</h4> <p>Arctic DEM in this area (close to Finse) is a snow-on DEM. So, there is no reason to do bias correction e.g. -0.555 m or -0.5269 m (This is snow depth over the entire area acrtually). For the same reason, snow cover introduce errors that make it challenging to obtain reliable co-registration results. In this competition.</p> <ul> <li>NuthKaab give a shift matrix (5.1641,-4.13) with NMAD 1.03 m in 14 minutes</li> <li>Gradiant Descending Corg give a shift matrix (2.7500,-3.4922) with NMAD 1.01 m in just 5 seconds.</li> </ul> <p>Based on these results, we conclude that ‘Gradient Descending Coregistration’ is the superior method in all scenarios. Additionally, ‘Gradient Descending Coregistration’ can easily support rotation correction, making it even more versatile.</p> <h2 id="point-interpolation-vs-zonal-statistics-of-the-footprint">Point interpolation vs Zonal statistics of the footprint</h2> <p>When picking up a value at a point on a DEM, the value may not match the grid exactly and instead is an <strong>interpolated value</strong>.</p> <p>In xDEM, interpolation is implemented using scipy.ndimapge.map_coordinates, which supports nearest, bilinear, and bicubic interpolation. Bicubic interpolation is sometimes better than bilinear interpolation, but this is not always the case.</p> <p>Another option for evaluating the value at a point on a DEM is to use <strong>zonal statistics</strong>, which calculates a statistic (e.g. mean, median, etc.) for the area surrounding the point. This can be particularly useful for high-resolution DEMs, where the statistic value of the footprint may provide a more accurate representation of the true value because the statistics removed the noisy spikes.</p> <p><strong>So, What is the best footprint size for zonal statistics? Again, I used gradient descending to find it!</strong></p> <p>I will use DTM1 and ICESat-2 snow-free measurements as an example to demonstrate the difference of two methods.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The footprint of ICESat-2 is about 13 m by 13 m.
</span><span class="n">pts_size</span> <span class="o">=</span> <span class="nf">get_dh_by_footprint</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="mi">13</span><span class="p">,</span><span class="mi">13</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="n">s_name</span><span class="o">=</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">)</span>

<span class="c1">## plot
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">pts_1</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">pts_size</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GD Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">footprint 13*13</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_13_0.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gradient Descending suggest the better size
</span><span class="n">size</span> <span class="o">=</span> <span class="nf">best_footprint</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="mi">13</span><span class="p">,</span><span class="mi">13</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="n">s_name</span><span class="o">=</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">mix</span><span class="sh">'</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>the best fit footprint(width,length): (8.0000,25.1250)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the 'best' size to get elevation difference
</span><span class="n">pts_size</span> <span class="o">=</span> <span class="nf">get_dh_by_footprint</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="mi">8</span><span class="p">,</span><span class="mf">25.125</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="n">s_name</span><span class="o">=</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">)</span>

<span class="c1">## plot
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">pts_1</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">pts_size</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GD Coreg</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">footprint 8*25</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_15_0.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the size to get elevation difference
</span><span class="n">pts_13100</span> <span class="o">=</span> <span class="nf">get_dh_by_footprint</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span> <span class="n">sf_subset_dtm1</span><span class="p">,(</span><span class="mi">13</span><span class="p">,</span><span class="mi">100</span><span class="p">),</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span><span class="n">s_name</span><span class="o">=</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">)</span>

<span class="c1">## plot
</span><span class="nf">final_histogram</span><span class="p">(</span><span class="n">pts_13100</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">pts_size</span><span class="p">[</span><span class="sh">'</span><span class="s">dh</span><span class="sh">'</span><span class="p">],</span><span class="n">dH_ref</span><span class="o">=</span><span class="n">result_nk_1</span><span class="p">[</span><span class="sh">'</span><span class="s">gdf</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">dh_before</span><span class="sh">'</span><span class="p">],</span><span class="nb">range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mf">99.75</span><span class="p">,</span><span class="n">legend</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">footprint 13*100</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">footprint 8*25</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">raw</span><span class="sh">'</span><span class="p">]);</span>

</code></pre></div></div> <p><img src="https://zhihaol.eu.org/assets/img/notebook/2023-01-05-GradientDescendingCoreg/2023-01-05-GradientDescendingCoreg_16_0.png" alt="png" class="center-image"/></p> <h4 id="section-summary-2">Section Summary</h4> <p>It is controversial to decide which one to use, point interpolation (with coreg) <strong>or</strong> footprint zonal statistics. So far we have matched ICESat-2 ‘s h_te_bestfit with values from:</p> <ul> <li>interpolation (and coreg) with NMAD 0.72 m.</li> <li>foorprint 13x13 m with NMAD 0.75 m (the footprint size naturally)</li> <li>foorprint 8x25 m with NMAD 0.67 m (the best footprint suggest by gradient descending algorithm)</li> <li>foorprint 13x100 m with NMAD 1.20 m (the footprint size of ATL08 segment)</li> </ul> <p>However, the results are hard to be reliable due to the small sample size. But gradient descending is very useful for applications on DEM or ICESat-2 dataset.</p>]]></content><author><name>Zhihao</name></author><category term="geodata"/><category term="datascience"/><category term="notes"/><summary type="html"><![CDATA[I just created the best ever coreg tool?]]></summary></entry><entry xml:lang="eng"><title type="html">DEM Coreg is a bound-restricted minimizing problem</title><link href="https://zhihaol.eu.org/blog/2023/Coreg/" rel="alternate" type="text/html" title="DEM Coreg is a bound-restricted minimizing problem"/><published>2023-01-02T00:00:00+00:00</published><updated>2023-01-02T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/Coreg</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/Coreg/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">importlib</span> <span class="kn">import</span> <span class="nb">reload</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">xdem</span>
<span class="kn">import</span> <span class="n">xsnow</span>
<span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">load_gdf</span><span class="p">,</span><span class="n">best_shift_px</span><span class="p">,</span><span class="n">get_dh_by_shift_px_gdf</span><span class="p">,</span><span class="n">load_gdf</span>
<span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">df_sampling_from_dem</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">reload</span><span class="p">(</span><span class="n">xsnow</span><span class="p">.</span><span class="n">misc</span><span class="p">)</span>
<span class="nf">reload</span><span class="p">(</span><span class="n">xsnow</span><span class="p">.</span><span class="n">godh</span><span class="p">)</span>
<span class="nf">reload</span><span class="p">(</span><span class="n">xdem</span><span class="p">)</span>
<span class="nf">reload</span><span class="p">(</span><span class="n">xdem</span><span class="p">.</span><span class="n">coreg</span><span class="p">)</span>
<span class="kn">from</span> <span class="n">importlib</span> <span class="kn">import</span> <span class="nb">reload</span>
<span class="kn">import</span> <span class="n">xsnow</span>
<span class="kn">import</span> <span class="n">xsnow.godh</span>
</code></pre></div></div> <h2 id="dem-coreg-is-a-bound-restricted-minimizing-problem">DEM Coreg is a bound-restricted minimizing problem.</h2> <ul> <li>DEM Coreg is a bound-restricted minimizing problem, but suffering from noise.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Loading the dataset.
</span>
<span class="c1"># 1 ICESat-2 snow free measurements.
</span><span class="n">sf_gdf</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">snow_free_land_gdf_normal_qc.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 2 DTM 10 exmaple (10 m Norway DTM-10)
#fid_dtm10 = r'\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\zhihaol\data\dtm10_finse_merged.tif'
</span><span class="n">fid_dtm10</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\DTM10_UTM33\6702_4_10m_z33.tif</span><span class="sh">'</span>

<span class="n">dtm_10_</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_dtm10</span><span class="p">)</span>
<span class="n">dtm_10</span> <span class="o">=</span> <span class="n">dtm_10_</span> <span class="o">+</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="sh">'</span><span class="s">no_kv_HREF2018B_NN2000_EUREF89.tif</span><span class="sh">'</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm_10_</span><span class="p">,</span><span class="n">resampling</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 3 DTM 1 exmaple (1 m Norway DTM-1)
</span><span class="n">fid_dtm1</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\\hypatia.uio.no\lh-mn-geofag-felles\projects\snowdepth\data\DEM\Norway\DTM1_UTM33\DTM1_11-11_UTM33\33-113-119.tif</span><span class="sh">'</span>
<span class="n">dtm_1_</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">fid_dtm1</span><span class="p">)</span>
<span class="n">dtm_1</span> <span class="o">=</span> <span class="n">dtm_1_</span> <span class="o">+</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="sh">'</span><span class="s">no_kv_HREF2018B_NN2000_EUREF89.tif</span><span class="sh">'</span><span class="p">).</span><span class="nf">reproject</span><span class="p">(</span><span class="n">dtm_1_</span><span class="p">,</span><span class="n">resampling</span><span class="o">=</span><span class="sh">'</span><span class="s">bilinear</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># subset snow free measurements
</span><span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">load_gdf</span>
<span class="n">sf_subset_dtm10_</span> <span class="o">=</span> <span class="nf">load_gdf</span><span class="p">(</span><span class="n">sf_gdf</span><span class="p">,</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sf_subset_dtm1_</span> <span class="o">=</span> <span class="nf">load_gdf</span><span class="p">(</span><span class="n">sf_gdf</span><span class="p">,</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">The length of sf_subset_dtm10: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm10_</span><span class="p">)</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">The length of sf_subset_dtm1: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_subset_dtm1_</span><span class="p">)</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The length of sf_subset_dtm10: 44149 points
The length of sf_subset_dtm1: 1586 points
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">xdem</span>
<span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">df_sampling_from_dem</span>

<span class="k">def</span> <span class="nf">yield_surface_noise</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_gdf_subset</span><span class="p">,</span>
                        <span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">nmad</span><span class="sh">'</span><span class="p">,</span> <span class="n">number_corg</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">downsampling_list</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">,</span>
                        <span class="n">nuthkaab</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gdc_qc</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">weight</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">number_corg</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">number_corg</span> <span class="o">=</span> <span class="mi">1</span>
        
    <span class="k">if</span> <span class="n">downsampling_list</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sampling</span> <span class="ow">in</span> <span class="n">downsampling_list</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span> <span class="n">sf_gdf_subset</span><span class="p">,</span> <span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="n">stat</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="n">perc_t</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="n">std_t</span><span class="p">,</span> <span class="n">downsampling</span><span class="o">=</span><span class="n">sampling</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="n">z_name</span><span class="p">,</span><span class="n">weight</span><span class="o">=</span><span class="n">weight</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">number_corg</span><span class="p">)]</span>
            <span class="n">nmad</span><span class="p">,</span><span class="n">rmse</span><span class="p">,</span><span class="n">std</span><span class="p">,</span><span class="n">median</span> <span class="o">=</span> <span class="nf">surface_noise</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_gdf_subset</span><span class="p">,</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="n">perc_t</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="n">std_t</span><span class="p">,</span><span class="n">downsampling</span><span class="o">=</span><span class="n">sampling</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="n">z_name</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">nuthkaab</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">func</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="n">coreg</span><span class="p">.</span><span class="nc">NuthKaab</span><span class="p">()</span>
                    <span class="n">func</span><span class="p">.</span><span class="nf">fit_pts</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="n">sampling</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">),</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">),</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">mask_highcurv</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                    <span class="n">res_nk</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_east_px</span><span class="sh">"</span><span class="p">],</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">offset_north_px</span><span class="sh">"</span><span class="p">],</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">bias</span><span class="sh">"</span><span class="p">],</span><span class="n">func</span><span class="p">.</span><span class="n">_meta</span><span class="p">[</span><span class="sh">"</span><span class="s">nmad</span><span class="sh">"</span><span class="p">])</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">NuthKaab coreg on </span><span class="si">{</span><span class="n">sampling</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">res_nk</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                    <span class="n">res_nk</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res_nk</span> <span class="o">=</span> <span class="bp">None</span>

            <span class="k">if</span> <span class="n">gdc_qc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">sf_subset_dtm10_ref</span> <span class="o">=</span> <span class="n">sf_gdf_subset</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="sh">'</span><span class="s">subset_te_flag == 5</span><span class="sh">'</span><span class="p">)</span>
                <span class="n">res_qc</span> <span class="o">=</span> <span class="nf">best_shift_px</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span> <span class="n">sf_subset_dtm10_ref</span><span class="p">,</span> <span class="n">disp</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="n">stat</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="n">perc_t</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="n">std_t</span><span class="p">,</span> <span class="n">downsampling</span><span class="o">=</span><span class="n">sampling</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="n">z_name</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res_qc</span> <span class="o">=</span> <span class="bp">None</span>

            <span class="k">yield</span> <span class="n">nmad</span><span class="p">,</span> <span class="n">rmse</span><span class="p">,</span> <span class="n">std</span><span class="p">,</span> <span class="n">median</span><span class="p">,</span><span class="n">res</span><span class="p">,</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_qc</span><span class="p">,</span><span class="nf">min</span><span class="p">(</span><span class="n">sampling</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">surface_noise</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_gdf_subset</span><span class="p">,</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">downsampling</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">h_te_best_fit</span><span class="sh">'</span><span class="p">):</span>

    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">,</span><span class="n">xdem</span><span class="p">.</span><span class="n">DEM</span><span class="p">):</span>
        <span class="n">sf_gdf_subset</span> <span class="o">=</span> <span class="nf">df_sampling_from_dem</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_gdf_subset</span><span class="p">,</span><span class="n">samples</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">downsampling</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">downsampling</span><span class="p">:</span>
        <span class="n">sf_gdf_subset</span> <span class="o">=</span> <span class="n">sf_gdf_subset</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="n">downsampling</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">),</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">).</span><span class="nf">copy</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Running on downsampling. The length of the gdf:</span><span class="sh">'</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">sf_gdf_subset</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Set downsampling = other value or False to make a change.</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">bond_</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">bond</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">bond</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">bond</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">nmad</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">),</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">)))</span>
    <span class="n">rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">),</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">)))</span>
    <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">),</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">)))</span>
    <span class="n">median</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">),</span><span class="nf">len</span><span class="p">(</span><span class="n">bond_</span><span class="p">)))</span>

    <span class="k">for</span> <span class="n">e</span><span class="p">,</span><span class="n">n</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="n">bond_</span><span class="p">,</span><span class="n">bond_</span><span class="p">):</span>
        <span class="n">results</span> <span class="o">=</span> <span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_gdf_subset</span><span class="p">,(</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">all</span><span class="sh">'</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="n">perc_t</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="n">std_t</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="n">z_name</span><span class="p">)</span>
        <span class="n">row</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">n</span><span class="o">-</span><span class="n">bond</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">bond</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">col</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">e</span><span class="o">-</span><span class="n">bond</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">bond</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">nmad</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">nmad</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">rmse</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">rmse</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">std</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">std</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">median</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">median</span><span class="sh">'</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">nmad</span><span class="p">,</span><span class="n">rmse</span><span class="p">,</span><span class="n">std</span><span class="p">,</span><span class="n">median</span>

<span class="k">def</span> <span class="nf">surface_plot</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
                 <span class="n">ax</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                 <span class="n">res</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">res_3</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">minimal</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">[m]</span><span class="sh">'</span><span class="p">,</span>
                 <span class="n">z_step_level</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">ax</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">projection</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3d</span><span class="sh">"</span><span class="p">})</span>
    <span class="k">if</span> <span class="n">xlim</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">xlim</span><span class="o">=</span><span class="n">bond</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">ylim</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">ylim</span><span class="o">=</span><span class="n">bond</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>

    <span class="c1"># Make a grid.
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">bond</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">bond</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">bond</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">meshgrid</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>

    <span class="c1"># plot minimal
</span>    <span class="n">zmin</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
    <span class="n">zmax</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span> <span class="o">==</span> <span class="n">zmin</span>
    <span class="c1">#color = np.where(mask,'blue','red')
</span>    
    <span class="c1"># Plot the 3D surface
</span>    <span class="n">ax</span><span class="p">.</span><span class="nf">plot_surface</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="sh">'</span><span class="s">royalblue</span><span class="sh">'</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">rstride</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">cstride</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
                    <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>

    <span class="c1"># Plot projections of the contours for each dimension.  By choosing offsets
</span>    <span class="c1"># that match the appropriate axes limits, the projected contours will sit on
</span>    <span class="c1"># the 'walls' of the graph.
</span>    <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">z_step_level</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">'</span><span class="s">levels</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">zmin</span><span class="p">,</span> <span class="n">zmax</span> <span class="o">+</span> <span class="n">z_step_level</span><span class="p">,</span> <span class="n">z_step_level</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">z_step_level</span> <span class="o">=</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="n">zlim_s</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">'</span><span class="s">levels</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">zmin</span><span class="p">,</span> <span class="n">zmax</span> <span class="o">+</span> <span class="n">z_step_level</span><span class="p">,</span> <span class="n">z_step_level</span><span class="p">)</span>


    <span class="n">z_contour</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">contour</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span><span class="n">zdir</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">coolwarm</span><span class="sh">'</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">contour</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span> <span class="n">zdir</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="n">xlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">coolwarm</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">contour</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span> <span class="n">zdir</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="n">ylim</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">coolwarm_r</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1">#ax.clabel(z_contour, kwargs['levels'][0::2], z_contour.levels[::2], inline=True,fmt ='%1.1f', colors='black', fontsize='x-large')
</span>
    <span class="k">if</span> <span class="n">minimal</span><span class="p">:</span>
        <span class="c1"># scatter minimal on bottom
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">mask</span><span class="p">],</span> <span class="n">Y</span><span class="p">[</span><span class="n">mask</span><span class="p">],</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">minimal</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1">#scatter minimal on z-axis
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">xlim</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ylim</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">zmin</span><span class="p">,</span><span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># plot gradient results
</span>    <span class="k">if</span> <span class="n">res</span><span class="p">:</span>

        <span class="c1"># plot [0,0] on bottom
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">,</span><span class="n">edgecolors</span><span class="o">=</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">(0,0)</span><span class="sh">'</span><span class="p">)</span>

        <span class="c1"># plot [shift matrix] by gradient descending on bottom
</span>        <span class="n">_x</span><span class="p">,</span><span class="n">_y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">res</span><span class="p">)[:,</span><span class="mi">0</span><span class="p">],</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">res</span><span class="p">)[:,</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">_nmad</span><span class="p">,</span><span class="n">_rmse</span><span class="p">,</span><span class="n">_std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">res</span><span class="p">)[:,</span><span class="mi">3</span><span class="p">],</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">res</span><span class="p">)[:,</span><span class="mi">4</span><span class="p">],</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">res</span><span class="p">)[:,</span><span class="mi">5</span><span class="p">]</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">_x</span><span class="p">,</span> <span class="n">_y</span><span class="p">,</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">GDC</span><span class="sh">'</span><span class="p">)</span>

        <span class="c1"># plot shift matrix on z axis
</span>        <span class="k">if</span> <span class="n">zlabel</span> <span class="o">==</span> <span class="sh">'</span><span class="s">NMAD [m]</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">_z</span> <span class="o">=</span> <span class="n">_nmad</span>
        <span class="k">if</span> <span class="n">zlabel</span> <span class="o">==</span> <span class="sh">'</span><span class="s">RMSE [m]</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">_z</span> <span class="o">=</span> <span class="n">_rmse</span>
        <span class="k">if</span> <span class="n">zlabel</span> <span class="o">==</span> <span class="sh">'</span><span class="s">STD [m]</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">_z</span> <span class="o">=</span> <span class="n">_std</span>
        
        <span class="c1">#ax.scatter([xlim[1]]*len(_x), [ylim[1]]*len(_y),_z, marker="x", color='green')
</span>    
    <span class="c1"># plot nuthkaab results
</span>    <span class="k">if</span> <span class="n">res_1</span><span class="p">:</span>
        <span class="c1"># plot [shift matrix] by gradient descending on bottom
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">res_1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res_1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">NuthKaab</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># plot reference results
</span>    <span class="k">if</span> <span class="n">res_2</span><span class="p">:</span>
        <span class="c1"># plot [shift matrix] by gradient descending on bottom
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">res_2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res_2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">alpha</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">purple</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">GDC_qc</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">res_3</span><span class="p">:</span>
        <span class="c1"># plot [shift matrix] by gradient descending on bottom
</span>        <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">res_2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res_2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">zlim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">alpha</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">others</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">ax</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span> <span class="n">zlim</span><span class="o">=</span><span class="n">zlim</span><span class="p">,</span>
        <span class="n">xlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">Shifted E [px]</span><span class="sh">'</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="sh">'</span><span class="s">Shifted N [px]</span><span class="sh">'</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="n">zlabel</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

    <span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>

</code></pre></div></div> <h2 id="case-1---shifted-dem">Case 1 - Shifted DEM</h2> <p>Nuth &amp; Kaab (2011) showed elevation difference in a 2D scheme with $\alpha$ as the magnitude of the horizontal shift, b as the direction of the shift, which is extremely useful for coregistration when there are enough points and the size and resolution of DEM are relatively manageable.</p> <p><img src="https://i.imgur.com/UzkOHot.png" alt=""/></p> <p>We can also plot the variation of elevation difference in a 3D scheme. In this case, I shifted a DTM10 (1.2, -0.7) px horizontaly and 0.16 m vertically on purpose and co-register it back in a brute test.</p> <ul> <li>Brute test calculated the elevation difference in 0.1 px interval over a window (-2 px, 2 px) on east and north.</li> <li>All coregs are shifted base on NMAD.</li> <li>The points are subsampled to 10000, 3000, 1000.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">dem_shift</span>

<span class="c1"># Shift a DTM10 (1.2,-0.7) px and 0.16 m on purpose
</span><span class="n">dtm_10_shifted</span> <span class="o">=</span> <span class="nf">dem_shift</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="mf">1.2</span><span class="p">,</span><span class="o">-</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">0.16</span><span class="p">)</span>
<span class="n">dem_tba</span> <span class="o">=</span> <span class="n">dtm_10_shifted</span>
<span class="n">df_ref</span> <span class="o">=</span> <span class="nf">df_sampling_from_dem</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">dem_tba</span><span class="p">,</span><span class="n">samples</span><span class="o">=</span><span class="mi">20000</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">bond</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

<span class="k">for</span> <span class="n">nmad</span><span class="p">,</span> <span class="n">rmse</span><span class="p">,</span> <span class="n">std</span><span class="p">,</span> <span class="n">median</span><span class="p">,</span><span class="n">res</span><span class="p">,</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_qc</span><span class="p">,</span><span class="n">sampling</span> <span class="ow">in</span> <span class="nf">yield_surface_noise</span><span class="p">(</span><span class="n">dem_tba</span><span class="p">,</span><span class="n">df_ref</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">downsampling_list</span><span class="o">=</span><span class="p">[</span><span class="mi">10000</span><span class="p">,</span><span class="mi">3000</span><span class="p">,</span><span class="mi">1000</span><span class="p">],</span><span class="n">gdc_qc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">z_lim_nmad</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">z_lim_rmse</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="mf">1.5</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="mi">20</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">z_lim_std</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="mf">1.5</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="mi">20</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">fig</span><span class="p">,(</span><span class="n">ax1</span><span class="p">,</span><span class="n">ax2</span><span class="p">,</span><span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">projection</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3d</span><span class="sh">"</span><span class="p">})</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">shifted pixels of DEM longyearbyen on </span><span class="si">{</span><span class="n">sampling</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">nmad</span><span class="p">,</span> <span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD</span><span class="sh">'</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span> <span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_nmad</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">rmse</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_rmse</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">std</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">STD</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">STD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_std</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 10000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.2031,0.7031,-0.1630),0.1780
Running on downsampling. The length of the gdf: 10000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 10000: (-1.2059757056614222, 0.6973771900864857, -0.16427612, 0.17899064941406248)
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_7_1.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 3000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.2031,0.7031,-0.1630),0.1780
Running on downsampling. The length of the gdf: 3000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 3000: (-1.199313462032361, 0.6898301972399311, -0.16362, 0.1797598205566406)
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_7_3.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 1000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.1815,0.6815,-0.1622),0.1794
Running on downsampling. The length of the gdf: 1000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_7_5.png" alt="png" class="center-image"/></p> <h2 id="case-2---dem-longyearbyen-1990-and-longyearbyen-2009">Case 2 - DEM Longyearbyen 1990 and Longyearbyen 2009</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">xsnow.misc</span> <span class="kn">import</span> <span class="n">df_sampling_from_dem</span>
<span class="kn">from</span> <span class="n">xdem</span> <span class="kn">import</span> <span class="n">examples</span>
<span class="kn">from</span> <span class="n">geoutils</span> <span class="kn">import</span> <span class="n">Vector</span><span class="p">,</span><span class="n">Raster</span>

<span class="n">dem_ref</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">examples</span><span class="p">.</span><span class="nf">get_path</span><span class="p">(</span><span class="sh">"</span><span class="s">longyearbyen_ref_dem</span><span class="sh">"</span><span class="p">))</span>
<span class="n">dem_tba</span> <span class="o">=</span> <span class="n">xdem</span><span class="p">.</span><span class="nc">DEM</span><span class="p">(</span><span class="n">examples</span><span class="p">.</span><span class="nf">get_path</span><span class="p">(</span><span class="sh">"</span><span class="s">longyearbyen_tba_dem</span><span class="sh">"</span><span class="p">))</span>
<span class="n">glacier_mask</span> <span class="o">=</span> <span class="nc">Vector</span><span class="p">(</span><span class="n">examples</span><span class="p">.</span><span class="nf">get_path</span><span class="p">(</span><span class="sh">"</span><span class="s">longyearbyen_glacier_outlines</span><span class="sh">"</span><span class="p">))</span>
<span class="n">inlier_mask</span> <span class="o">=</span> <span class="o">~</span><span class="n">glacier_mask</span><span class="p">.</span><span class="nf">create_mask</span><span class="p">(</span><span class="n">dem_ref</span><span class="p">)</span>

<span class="n">df_ref</span> <span class="o">=</span> <span class="nf">df_sampling_from_dem</span><span class="p">(</span><span class="n">dem_ref</span><span class="p">,</span><span class="n">dem_tba</span><span class="p">,</span><span class="n">inlier_mask</span><span class="o">=</span><span class="n">inlier_mask</span><span class="p">,</span><span class="n">samples</span><span class="o">=</span><span class="mi">15000</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="sh">'</span><span class="s">ul</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bond</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.05</span><span class="p">)</span>

<span class="c1"># axes limit
</span><span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="k">for</span> <span class="n">nmad</span><span class="p">,</span> <span class="n">rmse</span><span class="p">,</span> <span class="n">std</span><span class="p">,</span> <span class="n">median</span><span class="p">,</span><span class="n">res</span><span class="p">,</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_qc</span><span class="p">,</span><span class="n">sampling</span> <span class="ow">in</span> <span class="nf">yield_surface_noise</span><span class="p">(</span><span class="n">dem_tba</span><span class="p">,</span> <span class="n">df_ref</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">downsampling_list</span><span class="o">=</span><span class="p">[</span><span class="mi">10000</span><span class="p">,</span><span class="mi">3000</span><span class="p">,</span><span class="mi">1000</span><span class="p">],</span><span class="n">gdc_qc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">z_name</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">z_lim_nmad</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">z_lim_rmse</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="mf">1.5</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">z_lim_std</span> <span class="o">=</span> <span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="mf">1.5</span><span class="p">),</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>

    <span class="n">fig</span><span class="p">,(</span><span class="n">ax1</span><span class="p">,</span><span class="n">ax2</span><span class="p">,</span><span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">projection</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3d</span><span class="sh">"</span><span class="p">})</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">shifted pixels of DEM longyearbyen on </span><span class="si">{</span><span class="n">sampling</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">nmad</span><span class="p">,</span> <span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD</span><span class="sh">'</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span> <span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_nmad</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">rmse</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_rmse</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">std</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">STD</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">STD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_std</span><span class="p">,</span><span class="n">zlim_s</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 10000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.5469,-0.1250,-1.8884),2.4996
Running on downsampling. The length of the gdf: 10000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 10000: (-0.44989970346639757, -0.13631736964576785, -1.9579468, 2.543117335510254)
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_10_1.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 3000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.5000,-0.1562,-1.8764),2.5242
Running on downsampling. The length of the gdf: 3000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 3000: (-0.43152742135357697, -0.17112353846215173, -1.9326782, 2.547257286071777)
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_10_3.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 1000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.5000,-0.1250,-1.8980),2.5237
Running on downsampling. The length of the gdf: 1000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_10_5.png" alt="png" class="center-image"/></p> <h2 id="case-3---dtm10">Case 3 - DTM10</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bond</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">0.05</span><span class="p">)</span>

<span class="c1"># axes limit
</span><span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">1.0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">nmad</span><span class="p">,</span> <span class="n">rmse</span><span class="p">,</span> <span class="n">std</span><span class="p">,</span> <span class="n">median</span><span class="p">,</span><span class="n">res</span><span class="p">,</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_qc</span><span class="p">,</span><span class="n">sampling</span> <span class="ow">in</span> <span class="nf">yield_surface_noise</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">downsampling_list</span><span class="o">=</span><span class="p">[</span><span class="mi">10000</span><span class="p">,</span><span class="mi">3000</span><span class="p">,</span><span class="mi">1000</span><span class="p">],</span><span class="n">weight</span><span class="o">=</span><span class="sh">'</span><span class="s">subset_te_flag</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">z_lim_nmad</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">z_lim_rmse</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">z_lim_std</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  

    <span class="n">fig</span><span class="p">,(</span><span class="n">ax1</span><span class="p">,</span><span class="n">ax2</span><span class="p">,</span><span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">projection</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3d</span><span class="sh">"</span><span class="p">})</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">shifted pixels of DTM10 on </span><span class="si">{</span><span class="n">sampling</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">nmad</span><span class="p">,</span> <span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD</span><span class="sh">'</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span> <span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_nmad</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">rmse</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_rmse</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">std</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">STD</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">STD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_std</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 10000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4375,0.2656,-0.0065),0.5992
Running on downsampling. The length of the gdf: 10000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 10000: (-0.43959885000839216, 0.2685718552192047, -0.0128173828125, 0.5952479736328125)
Running best_shift_px on downsampling. The length of the gdf: 10000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4844,0.3125,0.1088),0.3848
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_13_1.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 3000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4844,0.1815,-0.0063),0.6086
Running on downsampling. The length of the gdf: 3000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
NuthKaab coreg on 3000: (-0.4273086350909474, 0.259520889514669, -0.01318359375, 0.5863798828125)
Running best_shift_px on downsampling. The length of the gdf: 3000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4591,0.2909,0.1092),0.3856
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_13_3.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 1000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4688,0.5060,-0.0110),0.6305
Running on downsampling. The length of the gdf: 1000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
Running best_shift_px on downsampling. The length of the gdf: 1000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-0.4627,0.3438,0.1067),0.3884
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_13_5.png" alt="png" class="center-image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">get_dh_by_shift_px_gdf</span>

<span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,(</span><span class="o">-</span><span class="mf">0.4375</span><span class="p">,</span><span class="mf">0.2656</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.5992295654296874
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,(</span><span class="o">-</span><span class="mf">0.43959885000839216</span><span class="p">,</span> <span class="mf">0.2685718552192047</span><span class="p">),</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.5986866210937499
</code></pre></div></div> <h2 id="case---4-dtm1">Case - 4 DTM1</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bond</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>

<span class="c1"># axes limit
</span><span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>

<span class="k">for</span> <span class="n">nmad</span><span class="p">,</span> <span class="n">rmse</span><span class="p">,</span> <span class="n">std</span><span class="p">,</span> <span class="n">median</span><span class="p">,</span><span class="n">res</span><span class="p">,</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_qc</span><span class="p">,</span><span class="n">sampling</span> <span class="ow">in</span> <span class="nf">yield_surface_noise</span><span class="p">(</span><span class="n">dtm_1</span><span class="p">,</span><span class="n">sf_subset_dtm1</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">downsampling_list</span><span class="o">=</span><span class="p">[</span><span class="mi">10000</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mi">500</span><span class="p">],</span><span class="n">gdc_qc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">weight</span><span class="o">=</span><span class="sh">'</span><span class="s">subset_te_flag</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">z_lim_nmad</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.4</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mf">0.4</span><span class="p">)</span>
    <span class="n">z_lim_rmse</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.6</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mf">0.8</span><span class="p">)</span>
    <span class="n">z_lim_std</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.6</span><span class="p">,</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mf">0.8</span><span class="p">)</span>

    <span class="n">fig</span><span class="p">,(</span><span class="n">ax1</span><span class="p">,</span><span class="n">ax2</span><span class="p">,</span><span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">projection</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3d</span><span class="sh">"</span><span class="p">})</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">shifted pixels of DTM1 on </span><span class="si">{</span><span class="n">sampling</span><span class="si">}</span><span class="s"> points</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">nmad</span><span class="p">,</span> <span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD</span><span class="sh">'</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span> <span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">NMAD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_nmad</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">rmse</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">RMSE [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_rmse</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
    <span class="nf">surface_plot</span><span class="p">(</span><span class="n">std</span><span class="p">,</span><span class="n">bond</span><span class="o">=</span><span class="n">bond</span><span class="p">,</span><span class="n">xlim</span><span class="o">=</span><span class="n">xlim</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="n">ylim</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">STD</span><span class="sh">'</span><span class="p">,</span><span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="p">,</span><span class="n">res_1</span><span class="o">=</span><span class="n">res_nk</span><span class="p">,</span><span class="n">res_2</span><span class="o">=</span><span class="n">res_qc</span><span class="p">,</span> <span class="n">zlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">STD [m]</span><span class="sh">'</span><span class="p">,</span><span class="n">zlim</span><span class="o">=</span><span class="n">z_lim_std</span><span class="p">,</span><span class="n">z_step_level</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.5000,-1.9375,-0.0508),0.5833
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_18_1.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 1000
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.7656,0.2284,-0.0659),0.5798
Running on downsampling. The length of the gdf: 1000
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_18_3.png" alt="png" class="center-image"/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running best_shift_px on downsampling. The length of the gdf: 500
Gradient Descending Coreg fit matrix(e_px,n_px,bias),nmad:(-1.9736,-2.0781,-0.0555),0.5788
Running on downsampling. The length of the gdf: 500
Set downsampling = other value or False to make a change.
Warning: There is no curvature in dataframe. Set mask_highcurv = True for more robust results and costs more time
</code></pre></div></div> <p><img src="/assets/img/notebook/xsnow_coreg/xsnow_coreg_18_5.png" alt="png" class="center-image"/></p> <h2 id="the-best-fit-algorithm-and-coeficients">The best fit algorithm and coeficients</h2> <p>Gradient descending can also be implemented by L-BFGS-B from Scipy.optimize if the noise is not severe.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scipy.optimize</span> <span class="kn">import</span> <span class="n">minimize</span>
<span class="kn">from</span> <span class="n">xsnow.godh</span> <span class="kn">import</span> <span class="n">get_dh_by_shift_px_gdf</span>

<span class="c1"># start iteration, find the best shifting px
</span><span class="n">func_x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">get_dh_by_shift_px_gdf</span><span class="p">(</span><span class="n">dtm_10</span><span class="p">,</span><span class="n">sf_subset_dtm10</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">perc_t</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">std_t</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">stat</span><span class="o">=</span><span class="sh">'</span><span class="s">rmse</span><span class="sh">'</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="nf">minimize</span><span class="p">(</span><span class="n">func_x</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">L-BFGS-B</span><span class="sh">'</span><span class="p">,</span><span class="n">bounds</span><span class="o">=</span><span class="p">((</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)))</span>
<span class="n">res</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      fun: 1.5511970187060895
 hess_inv: &lt;2x2 LbfgsInvHessProduct with dtype=float64&gt;
      jac: array([0.        , 0.01073706])
  message: 'CONVERGENCE: REL_REDUCTION_OF_F_&lt;=_FACTR*EPSMCH'
     nfev: 99
      nit: 7
     njev: 33
   status: 0
  success: True
        x: array([-0.09557894,  0.00446687])
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">=</span> <span class="nf">minimize</span><span class="p">(</span><span class="n">func_x</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">BFGS</span><span class="sh">'</span><span class="p">)</span>
<span class="n">res</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      fun: 1.5797875171900577
 hess_inv: array([[7.02123e-09, 0.00000e+00],
       [0.00000e+00, 1.00000e+00]])
      jac: array([0.0354276, 0.       ])
  message: 'Desired error not necessarily achieved due to precision loss.'
     nfev: 237
      nit: 2
     njev: 75
   status: 2
  success: False
        x: array([1.37243807e-07, 0.00000000e+00])
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">xsnow.noiseopt</span> <span class="kn">import</span> <span class="n">minimizeCompass</span>
<span class="n">res</span> <span class="o">=</span> <span class="nf">minimizeCompass</span><span class="p">(</span><span class="n">func_x</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">deltainit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">deltatol</span><span class="o">=</span><span class="mf">0.006</span><span class="p">,</span><span class="n">feps</span><span class="o">=</span><span class="mf">0.0001</span><span class="p">,</span><span class="n">bounds</span><span class="o">=</span><span class="p">((</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)),</span><span class="n">errorcontrol</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">res</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    free: array([False, False])
     fun: 1.491898243075958
 message: 'convergence within deltatol'
    nfev: 41
     nit: 14
 success: True
       x: array([-0.359375,  0.25    ])
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">=</span> <span class="nf">minimizeCompass</span><span class="p">(</span><span class="n">func_x</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">deltainit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">deltatol</span><span class="o">=</span><span class="mf">0.006</span><span class="p">,</span><span class="n">feps</span><span class="o">=</span><span class="mf">0.0005</span><span class="p">,</span><span class="n">bounds</span><span class="o">=</span><span class="p">((</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)),</span><span class="n">errorcontrol</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">res</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    free: array([ True, False])
     fun: 1.491898243075958
 message: 'convergence within deltatol. dim 0 is free at optimum'
    nfev: 40
     nit: 13
 success: True
       x: array([-0.359375,  0.25    ])
</code></pre></div></div>]]></content><author><name>Zhihao</name></author><category term="geodata"/><category term="datascience"/><category term="notes"/><summary type="html"><![CDATA[but suffering from noise]]></summary></entry><entry xml:lang="eng"><title type="html">Puerh tea 001</title><link href="https://zhihaol.eu.org/blog/2023/Puerh-tea-001/" rel="alternate" type="text/html" title="Puerh tea 001"/><published>2023-01-01T00:00:00+00:00</published><updated>2023-01-01T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2023/Puerh-tea-001</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2023/Puerh-tea-001/"><![CDATA[<p>Pu’erh tea, also spelled pu-erh or puer, is a type of fermented tea that is native to Yunnan province in China. It is named after the town of Pu’erh, which is located in the southern part of Yunnan province and has a long history of producing and trading tea. The town was a major hub on the <a href="https://en.wikipedia.org/wiki/Tea_Horse_Road">ancient Cha Ma Gu Dao (also known as the “Tea Horse Road”)</a> .</p> <h3 id="puerh-tea-cake-and-aging">Pu’erh tea cake and aging</h3> <p>The method of pressing pu’erh tea into cakes was originally developed as a way to <strong>transport the tea over long distances, particularly through the “Tea Horse Road”.</strong> The Tea Horse Road was a network of ancient trade routes that stretched across the mountainous regions of Yunnan and Sichuan provinces.</p> <p>The process of compressing the tea leaves into a cake also helps with the aging and fermentation process, <strong>as it allows the tea to mature and develop its unique flavors over time</strong>. It also increases the tea’s value as it gets older.</p> <iframe id="reddit-embed" src="https://www.redditmedia.com/r/tea/comments/ydvwfw/is_this_puer_tea_i_bought_in_hong_kong_in_2014/?ref_source=embed&amp;ref=share&amp;embed=true" sandbox="allow-scripts allow-same-origin allow-popups" style="border: none;" height="327" width="640" scrolling="no"></iframe> <h3 id="two-types-of-puerh-tea">Two types of Puerh tea</h3> <p>There are two main types of pu’erh tea with totally different taste: <a href="https://en.wikipedia.org/wiki/Pu%27er_tea"><strong>sheng pu’erh (raw/fresh) and shou pu’erh (ripened/cooked)</strong></a>.</p> <ul> <li>Sheng pu’erh is made from raw, unfermented tea leaves and is aged for several years before it is consumed. It is often described as having a complex, fruity flavor and a bright, yellow-green color. <strong>Personerly, I am enjoiy a dry, bitter initial taste, following a wet, sweet aftertaste.</strong></li> <li>Shou pu’erh, on the other hand, is made from fermented tea leaves and has a darker, reddish-brown color and a deep, woody flavor, with a warming, smooth feeling. <strong>Shou pu’erh doesn’t make you exciting but calming and relaxing.</strong></li> </ul> <p><img src="https://d27pcll2dx97vv.cloudfront.net/info/wp-content/uploads/2012/01/puerh_tea_production_process_830.jpg" alt="The Process of Raw and Ripe Pu-erh Tea"/> (Image from <a href="https://www.teaformeplease.com/raw-puerh-vs-cooked-puerh/">Raw Puerh vs Cooked Puerh - Tea for Me Please</a> )</p> <p>Both sheng and shou pu’erh cakes can be stored for long periods of time and are often aged for several years before they are consumed.</p> <h3 id="how-to-brew-it">How to brew it?</h3> <p>To brew pu’erh tea, you will need the following items:</p> <ul> <li>Pu’erh tea leaves. You can gently break the cake and take off the tea leaves.</li> <li>Filtered water.</li> <li>A teapot or a gaiwan (a traditional Chinese lidded bowl used for brewing tea).</li> <li>A tea strainer or infuser</li> </ul> <p>Here is a basic recipe for brewing pu’erh tea:</p> <ol> <li>Bring the water to a boil. <strong>And warming up you teapot or gaiwan with hot water</strong>.</li> <li>Place the tea leaves in the teapot or gaiwan.</li> <li>Pour the hot water over the tea leaves. <strong>The best ratio of tea to water is 1:20</strong>.</li> <li>Steep the tea for 15 seconds to 1 minutes, depending on your desired strength.</li> <li>Strain the tea into cups or a teapot.</li> <li>Repeat step 3, 4 and 5, but keep the infusion short. <strong>Good pu’erh is able to steep for 15 times even more!</strong></li> </ol> <p>The first time of doing step 3 and 4, you can rinse tea leaves by pouring a small amount of hot water over them and then discarding the water. This is called <strong>“awakening” the tea</strong> and is believed to help remove any impurities and enhance the flavors of the tea, being sure to use water that is hot but not boiling, as boiling water can damage the tea leaves and affect the flavor of the tea.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/XnCntK1ks80" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <p><strong>'’Tea drunk warning’’ on sheng pu’erh.</strong></p> <ul> <li>Sheng pu’erh contains caffeine. If you are sensitive to caffeine, and drink a large amount of pu’erh tea in a short period, you may experience symptoms of caffeine overdose.</li> <li>Relatively and personally <em>I prefer drink shou pu’erh after dinner, as it has a comforting, warm, and satisfying flavor that can help to relax and soothe the body and mind. Its bold flavor can also help to cut through rich or heavy foods, making it a good choice for digestion.</em></li> </ul> <h3 id="how-to-storage-it">How to storage it?</h3> <p>Proper storage is important for preserving the quality and flavor of pu’erh tea. Here are some tips for storing pu’erh tea:</p> <ol> <li>Keep the tea away from light and moisture: Pu’erh tea should be stored in <strong>a cool, dry, and dark place,</strong> away from direct sunlight and sources of moisture. Exposure to light and moisture can cause the tea to lose its flavor and aroma over time.</li> <li>Use an airtight container: It is important to store pu’erh tea in an airtight container to keep out any air and moisture that may affect the tea’s quality. Glass or ceramic containers with tight-fitting lids are good options.</li> <li>Avoid strong odors: Pu’erh tea can absorb odors from other foods or materials, so it is important to store it away from strong-smelling items.</li> </ol> <p>Hope you enjoy pu’erh tea!</p> <h3 id="other-resources">Other resources</h3> <ul> <li><a href="https://www.teavivre.com/info/difference-between-raw-and-ripe-puerh-tea.html">Understanding the Difference between Raw Pu-erh Tea and Ripe Pu-erh Tea – teavivre</a></li> </ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/xY9w7GezgpU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>Zhihao</name></author><category term="life"/><category term="001"/><category term="notes"/><summary type="html"><![CDATA[What is Puerh tea and how to brew it?]]></summary></entry><entry xml:lang="eng"><title type="html">Cross-country skiing 001</title><link href="https://zhihaol.eu.org/blog/2022/Crosscountry-skiing-001/" rel="alternate" type="text/html" title="Cross-country skiing 001"/><published>2022-12-26T00:00:00+00:00</published><updated>2022-12-26T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2022/Crosscountry-skiing-001</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2022/Crosscountry-skiing-001/"><![CDATA[<p>This is a tutorial for beginners with materials from YouTube mainly.</p> <h2 id="the-taste-of-cross-country-skiing">The taste of cross-country skiing</h2> <p>Cross-country skiing, also known as Nordic skiing, differs from alpine skiing (downhill skiing) by having skis with <strong>an unfixed heel</strong> that enables skiers to cross forests and mountains.</p> <p>Contrary to downhill skiing’s thrilling focus, cross-country skiing can be both intense and peaceful. (1) cross-country demands much more workout when uphill because there is no ski lift (2) skiing with dogs and crossing the flat forest can be extremely peaceful. Below are my favorite videos.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/Bkql4akV5XU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <iframe width="560" height="315" src="https://www.youtube.com/embed/jmGgriw7lmU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <h2 id="lesson-0-equipments-and-clothing">Lesson 0: Equipments and clothing</h2> <p>There are four types of skis available:</p> <ul> <li><strong>Classic skis</strong> are designed for use on groomed trails and are the most common ones.</li> <li><strong>Skate skis</strong> are designed for use on groomed trails and are wider and shorter than classic skis. They have a stiffer flex and a non-waxable base, and they are typically used in a skating motion to propel the skier forward.</li> <li><strong>Touring skis</strong> are designed for backcountry use.</li> <li><strong>Telemark skis</strong> are designed for use in backcountry terrain and are typically wider and shorter than touring skis.</li> </ul> <p>Here I suggest starting with <strong>classic skis</strong>, which are <strong>10 to 20 cm longer than your height</strong>. There are typically two types of binding, NNN and STS, so be sure you get compatible boots.</p> <p><img src="https://i.imgur.com/3lUhiyO.png" alt=""/></p> <p>(Image edit from internet)</p> <p>The picture above also reminds us how to dress properly . (1) no cotton but fast drying, breathable synthetic clothing (2) be light and flexible, no need to dress like downhill skiers but like a runner.</p> <h2 id="lesson-1-gain-your-balance---from-static-to-dynamic">Lesson 1: Gain your balance - From static to dynamic</h2> <p>While we stand still, the weight is exactly beneath the feet. However, It is better to give up the feeling of standing still. Once you stand on skis and start moving, it involves <a href="https://nordicskilab.com/courses/learn-diagonal-stride/">dynamically shifting weight between two skis rather than standing still on skis</a>.</p> <p>Check the video below, in the first 3 minutes it demonstrates:</p> <ul> <li><strong>Practice transferring your weight</strong> (00:30)</li> <li><strong>Kick and glide</strong>. When we put all weight in one ski, the ski depresses, so that we can use the kick zone to generate a gliding forward (01:05 - 03:15). <a href="https://tahoetrailguide.com/cross-country-skiing-explained-part-1-introduction-to-classic-cross-country-skis/">This is how the skis are designed to work</a></li> </ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/SuKn-acPvVk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <p>I also recommend the video below, which contains the following points:</p> <ul> <li>The ready stance (04:30). You can also jump with skis to feel the normal ready stance. Normally the hands are always in front of the body.</li> <li>The camber of the skis (05:40). This help you understand the what happens to skis when you kick and glide.</li> <li>How to fall and stand up (06:05)</li> <li>Practice standing on one ski (transferring your weight) (07:20)</li> <li>Step turn (transferring your weight) (08:00)</li> </ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/VfwKAU4zaJM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <h2 id="lesson-2-double-stride-and-diagonal-stride">Lesson 2: Double stride and Diagonal stride</h2> <p>Now it’s time to use poles. <strong>Double stride is the basic poling motion of cross-country skiing. Diagonal stride that combines polling with the shuffle-and-glide</strong>, which you may need extra days to master.</p> <p>The first video:</p> <ul> <li>Double stride (03:10 - 05:45).</li> <li>Diagonal stride (05:45 - 07:00)</li> </ul> <p>The second video:</p> <ul> <li>Double stride (09:45 - 12:15).</li> </ul> <h2 id="lesson-3-snowplow-and-turning">Lesson 3: Snowplow and turning</h2> <p>Snowplowing is a wedge (V shape) to increase the edge contact with snow and gain extra force to uphill or to slow down while downhill. The key of turning is still transferring your weight from one side to another side. If you do it step by step, that is stepping turn. If you do it constantly, that is C shape turning.</p> <p>The first video:</p> <ul> <li>Snowplow (uphill herringbone) (07:00)</li> <li>Snowplow to downhill - slow down skills (08:50 - 10:50)</li> <li>Stepping turn (11:00)</li> </ul> <p>The second video:</p> <ul> <li>Snowplow (12:15 - 15:30).</li> <li>Step in&amp;out of the tracks (15:30 - 19:10).</li> <li>Uphill herringbone (25:30 - 27:00).</li> <li>C shape turning (28:20 - 29:15).</li> </ul> <p>After the first three lessons (approximately 3 hour’s practice), you can survive in the Nordmarka area. Falling down while learning is unavoidable in the first month, but every time it increases your sense of balance.</p> <h2 id="lesson-4-skating">Lesson 4: Skating</h2> <p>If you also want to master skate skiing, the video below would be beneficial.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/-yr0YtQ_UDQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <iframe width="560" height="315" src="https://www.youtube.com/embed/ZFPttSGcaSI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <p>Is that too easy for you. Here are advanced skills:</p> <ul> <li>Parallel turning.</li> <li>Telemarking turning.</li> <li>Hockey stop.</li> </ul> <h2 id="my-favorite-online-resources">My favorite online resources:</h2> <p><strong>Useful links:</strong></p> <ul> <li> <p><a href="https://www.skiforeningen.no/">Skiforeningen - the map of ski tracks in Oslo</a></p> </li> <li> <p><a href="https://www.bua.no/">BUA - rent free skis for free in Oslo</a></p> </li> <li> <p><a href="https://www.sio.no/en/sports/sio-athletica-offers-ski-rental">SiO Athletica - Rent skis for entire season in cheap price</a></p> </li> </ul> <p><strong>All in one YouTube video list</strong></p> <ul> <li><a href="https://www.youtube.com/@JaredManninen">Cross-Country Skiing Technique &amp; Demonstrations - Jared Manninen</a></li> <li><a href="https://youtube.com/playlist?list=PL1bOaWHI_iMu2ENFQJmZmblpdGVzAGCPi">X-C ski and telemark technique videos</a></li> </ul> <p><strong>The equipment</strong></p> <ul> <li><a href="https://www.rei.com/learn/expert-advice/crosscountry-ski-touring-gear.html">Cross-Country Skiing Equipment Guide REI Co-op</a></li> <li><a href="http://xcskiing.ca/equipment.html">Equipment for first time Cross-Country Skiers (xcskiing.ca)</a></li> <li><a href="http://xcskiing.ca/wax-guide.html">Waxing Your Skis - a Beginner’s Guide (xcskiing.ca)</a></li> <li><a href="https://tahoetrailguide.com/cross-country-skiing-explained-part-2-geometry-of-classic-cross-country-skis/">XC Skiing Explained (Part 2): Geometry of Classic Cross-Country Skis - Tahoe Trail Guide</a></li> </ul> <p><strong>Techniques</strong></p> <ul> <li><a href="http://xcskiing.ca/beginners.html">Cross-Country Skiing for Absolute Beginners (xcskiing.ca)</a></li> <li><a href="https://nordicskilab.com/tracks/">Beginner Lessons – Nordic Ski Lab</a></li> <li><a href="https://crosscountryskiingplanet.com/best-cross-country-skiing-youtube-videos/">Best Cross-Country Skiing Youtube Videos - Cross-Country Skiing Planet (crosscountryskiingplanet.com)</a></li> </ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/Cqo3yu-j890" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <iframe width="560" height="315" src="https://www.youtube.com/embed/7URFFSSw1co" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>Zhihao</name></author><category term="sports"/><category term="withme"/><category term="norge"/><category term="001"/><category term="notes"/><summary type="html"><![CDATA[Learn XC skiing with me]]></summary></entry><entry xml:lang="eng"><title type="html">Becoming a Full-Stack Geodata Scientist</title><link href="https://zhihaol.eu.org/blog/2022/full-stack-geodata-scientist/" rel="alternate" type="text/html" title="Becoming a Full-Stack Geodata Scientist"/><published>2022-12-25T00:00:00+00:00</published><updated>2022-12-25T00:00:00+00:00</updated><id>https://zhihaol.eu.org/blog/2022/full-stack-geodata-scientist</id><content type="html" xml:base="https://zhihaol.eu.org/blog/2022/full-stack-geodata-scientist/"><![CDATA[<h4 id="q-what-is-the-difference-between-data-scientist-and-full-stack-data-scientist">Q: what is the difference between data scientist and full stack data scientist?</h4> <p>A data scientist is typically someone who has a strong background in mathematics, statistics, and computer science, and is skilled at using these tools to extract insights from data. They might work with a variety of data sources and use a range of techniques to analyze and interpret the data, including machine learning algorithms and statistical modeling.</p> <p>A full stack data scientist is similar to a data scientist, but with the <strong>added ability to work with data at all stages of the data pipeline</strong>. This might include tasks such as <strong>data collection and ingestion, data storage and management, data processing and transformation, and data visualization and reporting</strong>. Full stack data scientists are often comfortable working with a variety of tools and technologies and have the ability to design and build complete data pipelines.</p> <h4 id="q-what-is-the-difference-between-geodata-scientist-and-data-scientist">Q: What is the difference between geodata scientist and data scientist?</h4> <p>A geodata scientist is a type of data scientist who specializes in working with geospatial data. This may include analyzing, visualizing, and modeling geodata using GIS software and other specialized tools.</p> <p>A data scientist, on the other hand, is a professional who uses data to extract insights, inform decision making, and solve problems in a variety of contexts. While both roles may involve working with data, a geodata scientist is likely to have a more specific focus on geospatial data and the use of GIS techniques.</p> <h4 id="q-in-the-long-run-i-want-to-be-a-full-stack-data-scientist-with-a-focus-on-geodata-what-i-can-do">Q: In the long run, I want to be a full stack data scientist with a focus on geodata, what I can do?</h4> <p>Sure! It sounds like you have a clear idea of where you want to go in your career. To achieve your goal of becoming a full stack data scientist with a focus on geodata, there are a few steps you might consider taking:</p> <ol> <li>Data Engineering: This involves working with large datasets and developing the infrastructure to store, process, and analyze the data. This could include learning programming languages such as Python or Java, as well as technologies like <code class="language-plaintext highlighter-rouge">Hadoop</code> and <code class="language-plaintext highlighter-rouge">Spark</code>.</li> <li>Data Visualization: Being able to effectively communicate your findings through data visualization is important in any data science role. You may want to learn tools like <code class="language-plaintext highlighter-rouge">Tableau</code> or <code class="language-plaintext highlighter-rouge">D3.js</code> to enhance your visualization skills.</li> <li>Machine Learning: As a geodata scientist, you may want to focus on machine learning techniques that are particularly relevant to geospatial data. This could include spatial statistics and geostatistics, as well as advanced machine learning techniques like deep learning.</li> <li>Front-End Development: As a full stack geodata scientist, you should also have some proficiency in front-end development. This could involve learning HTML, CSS, and JavaScript, as well as frameworks like <code class="language-plaintext highlighter-rouge">React</code> or <code class="language-plaintext highlighter-rouge">Angular</code>.</li> </ol> <p>Overall, the key to becoming a full stack geodata scientist is to continually learn and stay up-to-date with the latest technologies and techniques in the field. This may involve taking online courses, participating in hackathons, or contributing to open source projects.</p> <h4 id="q-so-for-those-areas-you-just-recommended-can-you-give-the-name-of-the-book-or-courses-that-i-can-go-and-start-study-immediately">Q: So, for those areas you just recommended, can you give the name of the book or courses that I can go and start study immediately</h4> <p>Certainly! Here are some resources you might find helpful for improving your skills as a full-stack geodata scientist:</p> <ol> <li><strong>Data Science Fundamentals</strong>: This course, offered through Coursera, covers the fundamentals of data science and is a good starting point for anyone looking to enter the field.</li> <li><strong>Data Science with Python</strong>: This book, written by Jake VanderPlas, is a comprehensive introduction to data science using Python. It covers a wide range of topics including data manipulation, visualization, machine learning, and more.</li> <li><strong>Full Stack Web Development</strong>: This course, offered through Udemy, provides a comprehensive introduction to web development and teaches you the skills you need to build your own web applications.</li> <li><strong>Full Stack Deep Learning</strong>: This course, also offered through Udemy, covers the latest advancements in deep learning and how to apply them to real-world problems. It’s a great resource for anyone interested in using deep learning to analyze and interpret geodata.</li> </ol> <p>I hope these resources are helpful in your journey to become a full-stack geodata scientist! If you have any further questions, don’t hesitate to ask.</p> <h4 id="q-can-you-write-a-guide">Q: Can you write a guide?</h4> <p>Sure, here is an outline for an article with the title “The Journey to Becoming a Full Stack Geodata Scientist”:</p> <p>I. Introduction</p> <ul> <li>Definition of full stack geodata scientist</li> <li>Importance of geodata in the digital age</li> </ul> <p>II. Essential Skills for a Full Stack Geodata Scientist</p> <ul> <li>Geospatial data acquisition and processing</li> <li>Geodata visualization and presentation</li> <li>Geodata modeling and analysis</li> <li>Geodata management and storage</li> </ul> <p>III. Education and Training Options</p> <ul> <li>Bachelor’s and master’s degree programs in geospatial science</li> <li>Online courses and certifications in geodata science</li> <li>Professional development workshops and conferences</li> </ul> <p>IV. Real-World Experience and Practice</p> <ul> <li>Applying geodata skills in internships and entry-level positions</li> <li>Working on personal projects and open source contributions</li> <li>Collaborating with interdisciplinary teams on geodata-based projects</li> </ul> <p>V. Career Opportunities for Full Stack Geodata Scientists</p> <ul> <li>Industry roles in energy, transportation, environmental science, and more</li> <li>Research and academic positions in geospatial science</li> <li>Entrepreneurial opportunities in the geodata market</li> </ul> <p>VI. Conclusion</p> <ul> <li>The demand for full stack geodata scientists is growing</li> <li>With the right education, experience, and skills, you can become a full stack geodata scientist and make a meaningful impact in your field.</li> </ul> <h4 id="q-thanks">Q: Thanks.</h4> <p>You’re welcome! I’m happy to help. If you have any other questions or need further assistance, please don’t hesitate to ask. Good luck on your journey to becoming a full stack geodata scientist!</p>]]></content><author><name>openGPT</name></author><category term="geodata"/><category term="datascience"/><category term="notes"/><summary type="html"><![CDATA[a talk with openGPT about career planning]]></summary></entry></feed>